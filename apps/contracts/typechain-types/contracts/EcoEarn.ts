/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EcoEarnInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "appId"
      | "cycleDuration"
      | "getCurrentCycle"
      | "getNextCycleBlock"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isUserMaxSubmissionsReached"
      | "lastCycleStartBlock"
      | "maxSubmissionsPerCycle"
      | "nextCycle"
      | "registerValidSubmission"
      | "renounceRole"
      | "revokeRole"
      | "rewards"
      | "rewardsLeft"
      | "setAppId"
      | "setMaxSubmissionsPerCycle"
      | "setNextCycle"
      | "setRewardsAmount"
      | "submissions"
      | "supportsInterface"
      | "totalSubmissions"
      | "triggerCycle"
      | "withdrawRewards"
      | "x2EarnRewardsPoolContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimedAllocation"
      | "CycleDurationUpdated"
      | "CycleStarted"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Submission"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cycleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextCycleBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserMaxSubmissionsReached",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCycleStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSubmissionsPerCycle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nextCycle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerValidSubmission",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsLeft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAppId", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setMaxSubmissionsPerCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submissions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubmissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "x2EarnRewardsPoolContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cycleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextCycleBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserMaxSubmissionsReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCycleStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSubmissionsPerCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextCycle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerValidSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAppId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSubmissionsPerCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x2EarnRewardsPoolContract",
    data: BytesLike
  ): Result;
}

export namespace ClaimedAllocationEvent {
  export type InputTuple = [cycle: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [cycle: bigint, amount: bigint];
  export interface OutputObject {
    cycle: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CycleDurationUpdatedEvent {
  export type InputTuple = [newDuration: BigNumberish];
  export type OutputTuple = [newDuration: bigint];
  export interface OutputObject {
    newDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CycleStartedEvent {
  export type InputTuple = [cycleStartBlock: BigNumberish];
  export type OutputTuple = [cycleStartBlock: bigint];
  export interface OutputObject {
    cycleStartBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionEvent {
  export type InputTuple = [participant: AddressLike, amount: BigNumberish];
  export type OutputTuple = [participant: string, amount: bigint];
  export interface OutputObject {
    participant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EcoEarn extends BaseContract {
  connect(runner?: ContractRunner | null): EcoEarn;
  waitForDeployment(): Promise<this>;

  interface: EcoEarnInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  appId: TypedContractMethod<[], [string], "view">;

  cycleDuration: TypedContractMethod<[], [bigint], "view">;

  getCurrentCycle: TypedContractMethod<[], [bigint], "view">;

  getNextCycleBlock: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isUserMaxSubmissionsReached: TypedContractMethod<
    [participant: AddressLike],
    [boolean],
    "view"
  >;

  lastCycleStartBlock: TypedContractMethod<[], [bigint], "view">;

  maxSubmissionsPerCycle: TypedContractMethod<[], [bigint], "view">;

  nextCycle: TypedContractMethod<[], [bigint], "view">;

  registerValidSubmission: TypedContractMethod<
    [participant: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewards: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  rewardsLeft: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  setAppId: TypedContractMethod<[_appId: BytesLike], [void], "nonpayable">;

  setMaxSubmissionsPerCycle: TypedContractMethod<
    [_maxSubmissionsPerCycle: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNextCycle: TypedContractMethod<
    [_nextCycle: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardsAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  submissions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalSubmissions: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  triggerCycle: TypedContractMethod<[], [void], "nonpayable">;

  withdrawRewards: TypedContractMethod<
    [cycle: BigNumberish],
    [void],
    "nonpayable"
  >;

  x2EarnRewardsPoolContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "appId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cycleDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentCycle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNextCycleBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUserMaxSubmissionsReached"
  ): TypedContractMethod<[participant: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastCycleStartBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSubmissionsPerCycle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextCycle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerValidSubmission"
  ): TypedContractMethod<
    [participant: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardsLeft"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAppId"
  ): TypedContractMethod<[_appId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxSubmissionsPerCycle"
  ): TypedContractMethod<
    [_maxSubmissionsPerCycle: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNextCycle"
  ): TypedContractMethod<[_nextCycle: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardsAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submissions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalSubmissions"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "triggerCycle"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRewards"
  ): TypedContractMethod<[cycle: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "x2EarnRewardsPoolContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ClaimedAllocation"
  ): TypedContractEvent<
    ClaimedAllocationEvent.InputTuple,
    ClaimedAllocationEvent.OutputTuple,
    ClaimedAllocationEvent.OutputObject
  >;
  getEvent(
    key: "CycleDurationUpdated"
  ): TypedContractEvent<
    CycleDurationUpdatedEvent.InputTuple,
    CycleDurationUpdatedEvent.OutputTuple,
    CycleDurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CycleStarted"
  ): TypedContractEvent<
    CycleStartedEvent.InputTuple,
    CycleStartedEvent.OutputTuple,
    CycleStartedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Submission"
  ): TypedContractEvent<
    SubmissionEvent.InputTuple,
    SubmissionEvent.OutputTuple,
    SubmissionEvent.OutputObject
  >;

  filters: {
    "ClaimedAllocation(uint256,uint256)": TypedContractEvent<
      ClaimedAllocationEvent.InputTuple,
      ClaimedAllocationEvent.OutputTuple,
      ClaimedAllocationEvent.OutputObject
    >;
    ClaimedAllocation: TypedContractEvent<
      ClaimedAllocationEvent.InputTuple,
      ClaimedAllocationEvent.OutputTuple,
      ClaimedAllocationEvent.OutputObject
    >;

    "CycleDurationUpdated(uint256)": TypedContractEvent<
      CycleDurationUpdatedEvent.InputTuple,
      CycleDurationUpdatedEvent.OutputTuple,
      CycleDurationUpdatedEvent.OutputObject
    >;
    CycleDurationUpdated: TypedContractEvent<
      CycleDurationUpdatedEvent.InputTuple,
      CycleDurationUpdatedEvent.OutputTuple,
      CycleDurationUpdatedEvent.OutputObject
    >;

    "CycleStarted(uint256)": TypedContractEvent<
      CycleStartedEvent.InputTuple,
      CycleStartedEvent.OutputTuple,
      CycleStartedEvent.OutputObject
    >;
    CycleStarted: TypedContractEvent<
      CycleStartedEvent.InputTuple,
      CycleStartedEvent.OutputTuple,
      CycleStartedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Submission(address,uint256)": TypedContractEvent<
      SubmissionEvent.InputTuple,
      SubmissionEvent.OutputTuple,
      SubmissionEvent.OutputObject
    >;
    Submission: TypedContractEvent<
      SubmissionEvent.InputTuple,
      SubmissionEvent.OutputTuple,
      SubmissionEvent.OutputObject
    >;
  };
}
